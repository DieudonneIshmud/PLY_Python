Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expression
Rule 1     expression -> expression PLUS expression
Rule 2     expression -> LPAREN expression RPAREN
Rule 3     expression -> NAME EQUALS expression
Rule 4     expression -> NUMBER
Rule 5     expression -> NAME

Terminals, with rules where they appear

EQUALS               : 3
LPAREN               : 2
NAME                 : 3 5
NUMBER               : 4
PLUS                 : 1
RPAREN               : 2
error                : 

Nonterminals, with rules where they appear

expression           : 1 1 2 3 0

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . LPAREN expression RPAREN
    (3) expression -> . NAME EQUALS expression
    (4) expression -> . NUMBER
    (5) expression -> . NAME

    LPAREN          shift and go to state 2
    NAME            shift and go to state 3
    NUMBER          shift and go to state 4

    expression                     shift and go to state 1

state 1

    (0) S' -> expression .
    (1) expression -> expression . PLUS expression

    PLUS            shift and go to state 5


state 2

    (2) expression -> LPAREN . expression RPAREN
    (1) expression -> . expression PLUS expression
    (2) expression -> . LPAREN expression RPAREN
    (3) expression -> . NAME EQUALS expression
    (4) expression -> . NUMBER
    (5) expression -> . NAME

    LPAREN          shift and go to state 2
    NAME            shift and go to state 3
    NUMBER          shift and go to state 4

    expression                     shift and go to state 6

state 3

    (3) expression -> NAME . EQUALS expression
    (5) expression -> NAME .

    EQUALS          shift and go to state 7
    PLUS            reduce using rule 5 (expression -> NAME .)
    $end            reduce using rule 5 (expression -> NAME .)
    RPAREN          reduce using rule 5 (expression -> NAME .)


state 4

    (4) expression -> NUMBER .

    PLUS            reduce using rule 4 (expression -> NUMBER .)
    $end            reduce using rule 4 (expression -> NUMBER .)
    RPAREN          reduce using rule 4 (expression -> NUMBER .)


state 5

    (1) expression -> expression PLUS . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . LPAREN expression RPAREN
    (3) expression -> . NAME EQUALS expression
    (4) expression -> . NUMBER
    (5) expression -> . NAME

    LPAREN          shift and go to state 2
    NAME            shift and go to state 3
    NUMBER          shift and go to state 4

    expression                     shift and go to state 8

state 6

    (2) expression -> LPAREN expression . RPAREN
    (1) expression -> expression . PLUS expression

    RPAREN          shift and go to state 9
    PLUS            shift and go to state 5


state 7

    (3) expression -> NAME EQUALS . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . LPAREN expression RPAREN
    (3) expression -> . NAME EQUALS expression
    (4) expression -> . NUMBER
    (5) expression -> . NAME

    LPAREN          shift and go to state 2
    NAME            shift and go to state 3
    NUMBER          shift and go to state 4

    expression                     shift and go to state 10

state 8

    (1) expression -> expression PLUS expression .
    (1) expression -> expression . PLUS expression

  ! shift/reduce conflict for PLUS resolved as shift
    $end            reduce using rule 1 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 1 (expression -> expression PLUS expression .)
    PLUS            shift and go to state 5

  ! PLUS            [ reduce using rule 1 (expression -> expression PLUS expression .) ]


state 9

    (2) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 2 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 2 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 2 (expression -> LPAREN expression RPAREN .)


state 10

    (3) expression -> NAME EQUALS expression .
    (1) expression -> expression . PLUS expression

  ! shift/reduce conflict for PLUS resolved as shift
    $end            reduce using rule 3 (expression -> NAME EQUALS expression .)
    RPAREN          reduce using rule 3 (expression -> NAME EQUALS expression .)
    PLUS            shift and go to state 5

  ! PLUS            [ reduce using rule 3 (expression -> NAME EQUALS expression .) ]

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 8 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 10 resolved as shift
